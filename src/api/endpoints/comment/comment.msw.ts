/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import type { RequestHandlerOptions } from 'msw';
import { delay, http, HttpResponse } from 'msw';

import type { GetByTaskId200Item, PostComment200, UpdateTaskComment200 } from '../../models';

export const getGetByTaskIdResponseMock = (): GetByTaskId200Item[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    ...{
      user: {
        image: faker.string.alpha({ length: { min: 10, max: 20 } }),
        nickname: faker.string.alpha({ length: { min: 10, max: 20 } }),
        id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      },
    },
    ...{
      userId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      taskId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      content: faker.string.alpha({ length: { min: 10, max: 20 } }),
      id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    },
  }));

export const getPostCommentResponseMock = (
  overrideResponse: Partial<PostComment200> = {},
): PostComment200 => ({
  content: faker.string.alpha({ length: { min: 10, max: 20 } }),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  user: {
    image: faker.string.alpha({ length: { min: 10, max: 20 } }),
    nickname: faker.string.alpha({ length: { min: 10, max: 20 } }),
    id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  },
  ...overrideResponse,
});

export const getUpdateTaskCommentResponseMock = (
  overrideResponse: Partial<UpdateTaskComment200> = {},
): UpdateTaskComment200 => ({
  content: faker.string.alpha({ length: { min: 10, max: 20 } }),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  user: {
    image: faker.string.alpha({ length: { min: 10, max: 20 } }),
    nickname: faker.string.alpha({ length: { min: 10, max: 20 } }),
    id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  },
  ...overrideResponse,
});

export const getGetByTaskIdMockHandler = (
  overrideResponse?:
    | GetByTaskId200Item[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetByTaskId200Item[]> | GetByTaskId200Item[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/tasks/:taskId/comments',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetByTaskIdResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getPostCommentMockHandler = (
  overrideResponse?:
    | PostComment200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostComment200> | PostComment200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/tasks/:taskId/comments',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getPostCommentResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getUpdateTaskCommentMockHandler = (
  overrideResponse?:
    | UpdateTaskComment200
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<UpdateTaskComment200> | UpdateTaskComment200),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    '*/tasks/:taskId/comments/:commentId',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateTaskCommentResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getDeleteTaskCommentMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    '*/tasks/:taskId/comments/:commentId',
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
    options,
  );
};
export const getCommentMock = () => [
  getGetByTaskIdMockHandler(),
  getPostCommentMockHandler(),
  getUpdateTaskCommentMockHandler(),
  getDeleteTaskCommentMockHandler(),
];
