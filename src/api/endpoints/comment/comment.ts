/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';

import { httpClient } from '../../httpClient';
import type {
  CreateCommentDto,
  DeleteTaskComment403,
  DeleteTaskComment404,
  GetByTaskId200Item,
  GetByTaskId404,
  Id,
  PostComment200,
  PostComment404,
  UpdateCommentDto,
  UpdateTaskComment200,
  UpdateTaskComment403,
  UpdateTaskComment404,
} from '../../models';

export const getByTaskId = (taskId: Id, signal?: AbortSignal) => {
  return httpClient<GetByTaskId200Item[]>({
    url: `/tasks/${taskId}/comments`,
    method: 'GET',
    signal,
  });
};

export const getGetByTaskIdQueryKey = (taskId?: Id) => {
  return [`/tasks/${taskId}/comments`] as const;
};

export const getGetByTaskIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getByTaskId>>,
  TError = GetByTaskId404,
>(
  taskId: Id,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByTaskId>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetByTaskIdQueryKey(taskId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getByTaskId>>> = ({ signal }) =>
    getByTaskId(taskId, signal);

  return { queryKey, queryFn, enabled: !!taskId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getByTaskId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetByTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getByTaskId>>>;
export type GetByTaskIdQueryError = GetByTaskId404;

export function useGetByTaskId<
  TData = Awaited<ReturnType<typeof getByTaskId>>,
  TError = GetByTaskId404,
>(
  taskId: Id,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByTaskId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getByTaskId>>,
          TError,
          Awaited<ReturnType<typeof getByTaskId>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetByTaskId<
  TData = Awaited<ReturnType<typeof getByTaskId>>,
  TError = GetByTaskId404,
>(
  taskId: Id,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByTaskId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getByTaskId>>,
          TError,
          Awaited<ReturnType<typeof getByTaskId>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetByTaskId<
  TData = Awaited<ReturnType<typeof getByTaskId>>,
  TError = GetByTaskId404,
>(
  taskId: Id,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByTaskId>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetByTaskId<
  TData = Awaited<ReturnType<typeof getByTaskId>>,
  TError = GetByTaskId404,
>(
  taskId: Id,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByTaskId>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetByTaskIdQueryOptions(taskId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetByTaskIdQuery = async <
  TData = Awaited<ReturnType<typeof getByTaskId>>,
  TError = GetByTaskId404,
>(
  queryClient: QueryClient,
  taskId: Id,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByTaskId>>, TError, TData>>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetByTaskIdQueryOptions(taskId, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetByTaskIdSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getByTaskId>>,
  TError = GetByTaskId404,
>(
  taskId: Id,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof getByTaskId>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetByTaskIdQueryKey(taskId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getByTaskId>>> = ({ signal }) =>
    getByTaskId(taskId, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getByTaskId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetByTaskIdSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getByTaskId>>>;
export type GetByTaskIdSuspenseQueryError = GetByTaskId404;

export function useGetByTaskIdSuspense<
  TData = Awaited<ReturnType<typeof getByTaskId>>,
  TError = GetByTaskId404,
>(
  taskId: Id,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getByTaskId>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetByTaskIdSuspense<
  TData = Awaited<ReturnType<typeof getByTaskId>>,
  TError = GetByTaskId404,
>(
  taskId: Id,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof getByTaskId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetByTaskIdSuspense<
  TData = Awaited<ReturnType<typeof getByTaskId>>,
  TError = GetByTaskId404,
>(
  taskId: Id,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof getByTaskId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetByTaskIdSuspense<
  TData = Awaited<ReturnType<typeof getByTaskId>>,
  TError = GetByTaskId404,
>(
  taskId: Id,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof getByTaskId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetByTaskIdSuspenseQueryOptions(taskId, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postComment = (
  taskId: Id,
  createCommentDto: CreateCommentDto,
  signal?: AbortSignal,
) => {
  return httpClient<PostComment200>({
    url: `/tasks/${taskId}/comments`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createCommentDto,
    signal,
  });
};

export const getPostCommentMutationOptions = <
  TError = PostComment404,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postComment>>,
    TError,
    { taskId: Id; data: CreateCommentDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postComment>>,
  TError,
  { taskId: Id; data: CreateCommentDto },
  TContext
> => {
  const mutationKey = ['postComment'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postComment>>,
    { taskId: Id; data: CreateCommentDto }
  > = (props) => {
    const { taskId, data } = props ?? {};

    return postComment(taskId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCommentMutationResult = NonNullable<Awaited<ReturnType<typeof postComment>>>;
export type PostCommentMutationBody = CreateCommentDto;
export type PostCommentMutationError = PostComment404;

export const usePostComment = <TError = PostComment404, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postComment>>,
      TError,
      { taskId: Id; data: CreateCommentDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postComment>>,
  TError,
  { taskId: Id; data: CreateCommentDto },
  TContext
> => {
  const mutationOptions = getPostCommentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const updateTaskComment = (
  taskId: number,
  commentId: Id,
  updateCommentDto: UpdateCommentDto,
) => {
  return httpClient<UpdateTaskComment200>({
    url: `/tasks/${taskId}/comments/${commentId}`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateCommentDto,
  });
};

export const getUpdateTaskCommentMutationOptions = <
  TError = UpdateTaskComment403 | UpdateTaskComment404,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTaskComment>>,
    TError,
    { taskId: number; commentId: Id; data: UpdateCommentDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTaskComment>>,
  TError,
  { taskId: number; commentId: Id; data: UpdateCommentDto },
  TContext
> => {
  const mutationKey = ['updateTaskComment'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTaskComment>>,
    { taskId: number; commentId: Id; data: UpdateCommentDto }
  > = (props) => {
    const { taskId, commentId, data } = props ?? {};

    return updateTaskComment(taskId, commentId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTaskCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTaskComment>>
>;
export type UpdateTaskCommentMutationBody = UpdateCommentDto;
export type UpdateTaskCommentMutationError = UpdateTaskComment403 | UpdateTaskComment404;

export const useUpdateTaskComment = <
  TError = UpdateTaskComment403 | UpdateTaskComment404,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateTaskComment>>,
      TError,
      { taskId: number; commentId: Id; data: UpdateCommentDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateTaskComment>>,
  TError,
  { taskId: number; commentId: Id; data: UpdateCommentDto },
  TContext
> => {
  const mutationOptions = getUpdateTaskCommentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteTaskComment = (taskId: number, commentId: Id) => {
  return httpClient<void>({ url: `/tasks/${taskId}/comments/${commentId}`, method: 'DELETE' });
};

export const getDeleteTaskCommentMutationOptions = <
  TError = DeleteTaskComment403 | DeleteTaskComment404,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTaskComment>>,
    TError,
    { taskId: number; commentId: Id },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTaskComment>>,
  TError,
  { taskId: number; commentId: Id },
  TContext
> => {
  const mutationKey = ['deleteTaskComment'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTaskComment>>,
    { taskId: number; commentId: Id }
  > = (props) => {
    const { taskId, commentId } = props ?? {};

    return deleteTaskComment(taskId, commentId);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTaskCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTaskComment>>
>;

export type DeleteTaskCommentMutationError = DeleteTaskComment403 | DeleteTaskComment404;

export const useDeleteTaskComment = <
  TError = DeleteTaskComment403 | DeleteTaskComment404,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteTaskComment>>,
      TError,
      { taskId: number; commentId: Id },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteTaskComment>>,
  TError,
  { taskId: number; commentId: Id },
  TContext
> => {
  const mutationOptions = getDeleteTaskCommentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
