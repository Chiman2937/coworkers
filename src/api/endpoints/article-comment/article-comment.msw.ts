/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import type { RequestHandlerOptions } from 'msw';
import { delay, http, HttpResponse } from 'msw';

import type {
  CommentType,
  CursorBasedPaginationResponseCommentType,
  DeleteComment200,
} from '../../models';

export const getCreateArticleCommentResponseMock = (
  overrideResponse: Partial<CommentType> = {},
): CommentType => ({
  writer: {
    image: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    nickname: faker.string.alpha({ length: { min: 10, max: 20 } }),
    id: faker.number.int({ min: 1, max: undefined }),
  },
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  content: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.number.int({ min: 1, max: undefined }),
  ...overrideResponse,
});

export const getListArticleCommentsResponseMock = (
  overrideResponse: Partial<CursorBasedPaginationResponseCommentType> = {},
): CursorBasedPaginationResponseCommentType => ({
  nextCursor: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    null,
  ]),
  list: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    writer: {
      image: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      nickname: faker.string.alpha({ length: { min: 10, max: 20 } }),
      id: faker.number.int({ min: 1, max: undefined }),
    },
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    content: faker.string.alpha({ length: { min: 10, max: 20 } }),
    id: faker.number.int({ min: 1, max: undefined }),
  })),
  ...overrideResponse,
});

export const getUpdateCommentResponseMock = (
  overrideResponse: Partial<CommentType> = {},
): CommentType => ({
  writer: {
    image: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    nickname: faker.string.alpha({ length: { min: 10, max: 20 } }),
    id: faker.number.int({ min: 1, max: undefined }),
  },
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  content: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.number.int({ min: 1, max: undefined }),
  ...overrideResponse,
});

export const getDeleteCommentResponseMock = (
  overrideResponse: Partial<DeleteComment200> = {},
): DeleteComment200 => ({
  id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  ...overrideResponse,
});

export const getCreateArticleCommentMockHandler = (
  overrideResponse?:
    | CommentType
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CommentType> | CommentType),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/articles/:articleId/comments',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateArticleCommentResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getListArticleCommentsMockHandler = (
  overrideResponse?:
    | CursorBasedPaginationResponseCommentType
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<CursorBasedPaginationResponseCommentType>
        | CursorBasedPaginationResponseCommentType),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/articles/:articleId/comments',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getListArticleCommentsResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getUpdateCommentMockHandler = (
  overrideResponse?:
    | CommentType
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<CommentType> | CommentType),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    '*/comments/:commentId',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateCommentResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getDeleteCommentMockHandler = (
  overrideResponse?:
    | DeleteComment200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<DeleteComment200> | DeleteComment200),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    '*/comments/:commentId',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getDeleteCommentResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};
export const getArticleCommentMock = () => [
  getCreateArticleCommentMockHandler(),
  getListArticleCommentsMockHandler(),
  getUpdateCommentMockHandler(),
  getDeleteCommentMockHandler(),
];
