/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import type { RequestHandlerOptions } from 'msw';
import { delay, http, HttpResponse } from 'msw';

import type {
  ArticleDetailType,
  ArticleListType,
  DeleteArticle200,
  OffsetBasedPaginationResponseArticleListType,
} from '../../models';

export const getCreateArticleResponseMock = (
  overrideResponse: Partial<ArticleListType> = {},
): ArticleListType => ({
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  likeCount: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  writer: {
    nickname: faker.string.alpha({ length: { min: 10, max: 20 } }),
    id: faker.number.int({ min: 1, max: undefined }),
  },
  image: faker.internet.url(),
  title: faker.string.alpha({ length: { min: 1, max: 200 } }),
  id: faker.number.int({ min: 1, max: undefined }),
  ...overrideResponse,
});

export const getListArticlesResponseMock = (
  overrideResponse: Partial<OffsetBasedPaginationResponseArticleListType> = {},
): OffsetBasedPaginationResponseArticleListType => ({
  totalCount: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  list: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    likeCount: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    writer: {
      nickname: faker.string.alpha({ length: { min: 10, max: 20 } }),
      id: faker.number.int({ min: 1, max: undefined }),
    },
    image: faker.internet.url(),
    title: faker.string.alpha({ length: { min: 1, max: 200 } }),
    id: faker.number.int({ min: 1, max: undefined }),
  })),
  ...overrideResponse,
});

export const getRetrieveArticleResponseMock = (): ArticleDetailType => ({
  ...{
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    likeCount: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    writer: {
      nickname: faker.string.alpha({ length: { min: 10, max: 20 } }),
      id: faker.number.int({ min: 1, max: undefined }),
    },
    image: faker.internet.url(),
    title: faker.string.alpha({ length: { min: 1, max: 200 } }),
    id: faker.number.int({ min: 1, max: undefined }),
  },
  ...{
    commentCount: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    isLiked: faker.datatype.boolean(),
    content: faker.string.alpha({ length: { min: 1, max: 20 } }),
  },
});

export const getUpdateArticleResponseMock = (): ArticleDetailType => ({
  ...{
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    likeCount: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    writer: {
      nickname: faker.string.alpha({ length: { min: 10, max: 20 } }),
      id: faker.number.int({ min: 1, max: undefined }),
    },
    image: faker.internet.url(),
    title: faker.string.alpha({ length: { min: 1, max: 200 } }),
    id: faker.number.int({ min: 1, max: undefined }),
  },
  ...{
    commentCount: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    isLiked: faker.datatype.boolean(),
    content: faker.string.alpha({ length: { min: 1, max: 20 } }),
  },
});

export const getDeleteArticleResponseMock = (
  overrideResponse: Partial<DeleteArticle200> = {},
): DeleteArticle200 => ({
  id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  ...overrideResponse,
});

export const getLikeArticleResponseMock = (): ArticleDetailType => ({
  ...{
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    likeCount: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    writer: {
      nickname: faker.string.alpha({ length: { min: 10, max: 20 } }),
      id: faker.number.int({ min: 1, max: undefined }),
    },
    image: faker.internet.url(),
    title: faker.string.alpha({ length: { min: 1, max: 200 } }),
    id: faker.number.int({ min: 1, max: undefined }),
  },
  ...{
    commentCount: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    isLiked: faker.datatype.boolean(),
    content: faker.string.alpha({ length: { min: 1, max: 20 } }),
  },
});

export const getUnlikeArticleResponseMock = (): ArticleDetailType => ({
  ...{
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    likeCount: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    writer: {
      nickname: faker.string.alpha({ length: { min: 10, max: 20 } }),
      id: faker.number.int({ min: 1, max: undefined }),
    },
    image: faker.internet.url(),
    title: faker.string.alpha({ length: { min: 1, max: 200 } }),
    id: faker.number.int({ min: 1, max: undefined }),
  },
  ...{
    commentCount: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    isLiked: faker.datatype.boolean(),
    content: faker.string.alpha({ length: { min: 1, max: 20 } }),
  },
});

export const getCreateArticleMockHandler = (
  overrideResponse?:
    | ArticleListType
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ArticleListType> | ArticleListType),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/articles',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateArticleResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getListArticlesMockHandler = (
  overrideResponse?:
    | OffsetBasedPaginationResponseArticleListType
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<OffsetBasedPaginationResponseArticleListType>
        | OffsetBasedPaginationResponseArticleListType),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/articles',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getListArticlesResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getRetrieveArticleMockHandler = (
  overrideResponse?:
    | ArticleDetailType
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ArticleDetailType> | ArticleDetailType),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/articles/:articleId',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getRetrieveArticleResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getUpdateArticleMockHandler = (
  overrideResponse?:
    | ArticleDetailType
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<ArticleDetailType> | ArticleDetailType),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    '*/articles/:articleId',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateArticleResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getDeleteArticleMockHandler = (
  overrideResponse?:
    | DeleteArticle200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<DeleteArticle200> | DeleteArticle200),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    '*/articles/:articleId',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getDeleteArticleResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getLikeArticleMockHandler = (
  overrideResponse?:
    | ArticleDetailType
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ArticleDetailType> | ArticleDetailType),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/articles/:articleId/like',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getLikeArticleResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getUnlikeArticleMockHandler = (
  overrideResponse?:
    | ArticleDetailType
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<ArticleDetailType> | ArticleDetailType),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    '*/articles/:articleId/like',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getUnlikeArticleResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};
export const getArticleMock = () => [
  getCreateArticleMockHandler(),
  getListArticlesMockHandler(),
  getRetrieveArticleMockHandler(),
  getUpdateArticleMockHandler(),
  getDeleteArticleMockHandler(),
  getLikeArticleMockHandler(),
  getUnlikeArticleMockHandler(),
];
