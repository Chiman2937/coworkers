/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';

import { httpClient } from '../../httpClient';
import type { CreateRecurring200, TaskRecurringCreateDto } from '../../models';

/**
 * (반복)일정을 생성합니다.\
일종의 정책으로, 반복정책을 정하면, 해당 정책에 따라 할일이 생성됩니다.

할일(task)는 반복일정에 지정한 frequencyType에 따라 다르게 생성됩니다. \
ONCE: 한 번만 생성 (해당 일 조회시, 할일 존재) \
DAILY: 매일 생성 (시작일(startDate) 이후 어느 날짜를 조회해도 존재함) \
WEEKLY: 매주 생성 (시작일(startDate) 이후 해당 조건에 따라 존재) \
MONTHLY: 매월 생성 (시작일(startDate) 이후 해당 조건에 따라 존재)
 */
export const createRecurring = (
  groupId: number,
  taskListId: number,
  taskRecurringCreateDto: TaskRecurringCreateDto,
  signal?: AbortSignal,
) => {
  return httpClient<CreateRecurring200>({
    url: `/groups/${groupId}/task-lists/${taskListId}/recurring`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: taskRecurringCreateDto,
    signal,
  });
};

export const getCreateRecurringMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRecurring>>,
    TError,
    { groupId: number; taskListId: number; data: TaskRecurringCreateDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createRecurring>>,
  TError,
  { groupId: number; taskListId: number; data: TaskRecurringCreateDto },
  TContext
> => {
  const mutationKey = ['createRecurring'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createRecurring>>,
    { groupId: number; taskListId: number; data: TaskRecurringCreateDto }
  > = (props) => {
    const { groupId, taskListId, data } = props ?? {};

    return createRecurring(groupId, taskListId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateRecurringMutationResult = NonNullable<
  Awaited<ReturnType<typeof createRecurring>>
>;
export type CreateRecurringMutationBody = TaskRecurringCreateDto;
export type CreateRecurringMutationError = unknown;

export const useCreateRecurring = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createRecurring>>,
      TError,
      { groupId: number; taskListId: number; data: TaskRecurringCreateDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createRecurring>>,
  TError,
  { groupId: number; taskListId: number; data: TaskRecurringCreateDto },
  TContext
> => {
  const mutationOptions = getCreateRecurringMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
