/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import type { RequestHandlerOptions } from 'msw';
import { delay, http, HttpResponse } from 'msw';

import type { CreateRecurring200 } from '../../models';
import { _36EnumsFrequencyType } from '../../models';

export const getCreateRecurringResponseMock = (
  overrideResponse: Partial<CreateRecurring200> = {},
): CreateRecurring200 => ({
  writerId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  groupId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  taskListId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  monthDay: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  weekDays: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  ),
  frequencyType: faker.helpers.arrayElement(Object.values(_36EnumsFrequencyType)),
  startDate: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  ...overrideResponse,
});

export const getCreateRecurringMockHandler = (
  overrideResponse?:
    | CreateRecurring200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateRecurring200> | CreateRecurring200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/groups/:groupId/task-lists/:taskListId/recurring',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateRecurringResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};
export const getRecurringMock = () => [getCreateRecurringMockHandler()];
