/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import type { RequestHandlerOptions } from 'msw';
import { delay, http, HttpResponse } from 'msw';

import type {
  GetGroups200Item,
  GetMemberships200Item,
  GetUser200,
  ListDoneTasks200,
  ResetPassword200,
  SendResetPasswordEmail200,
  UpdateMe200,
  UpdatePassword200,
} from '../../models';
import { _36EnumsFrequencyType, _36EnumsRole } from '../../models';

export const getGetUserResponseMock = (overrideResponse: Partial<GetUser200> = {}): GetUser200 => ({
  teamId: faker.string.alpha({ length: { min: 10, max: 20 } }),
  image: faker.string.alpha({ length: { min: 10, max: 20 } }),
  nickname: faker.string.alpha({ length: { min: 10, max: 20 } }),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  memberships: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      ...{
        group: {
          teamId: faker.string.alpha({ length: { min: 10, max: 20 } }),
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          image: faker.string.alpha({ length: { min: 10, max: 20 } }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        },
      },
      ...{
        role: faker.helpers.arrayElement(Object.values(_36EnumsRole)),
        userImage: faker.string.alpha({ length: { min: 10, max: 20 } }),
        userEmail: faker.string.alpha({ length: { min: 10, max: 20 } }),
        userName: faker.string.alpha({ length: { min: 10, max: 20 } }),
        groupId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        userId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      },
    }),
  ),
  ...overrideResponse,
});

export const getUpdateMeResponseMock = (
  overrideResponse: Partial<UpdateMe200> = {},
): UpdateMe200 => ({
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getGetGroupsResponseMock = (): GetGroups200Item[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    teamId: faker.string.alpha({ length: { min: 10, max: 20 } }),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    image: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  }));

export const getGetMembershipsResponseMock = (): GetMemberships200Item[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    ...{
      group: {
        teamId: faker.string.alpha({ length: { min: 10, max: 20 } }),
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        image: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      },
    },
    ...{
      role: faker.helpers.arrayElement(Object.values(_36EnumsRole)),
      userImage: faker.string.alpha({ length: { min: 10, max: 20 } }),
      userEmail: faker.string.alpha({ length: { min: 10, max: 20 } }),
      userName: faker.string.alpha({ length: { min: 10, max: 20 } }),
      groupId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      userId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    },
  }));

export const getListDoneTasksResponseMock = (
  overrideResponse: Partial<ListDoneTasks200> = {},
): ListDoneTasks200 => ({
  tasksDone: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      displayIndex: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      writerId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      userId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      frequency: faker.helpers.arrayElement(Object.values(_36EnumsFrequencyType)),
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      recurringId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      doneAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      date: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    }),
  ),
  ...overrideResponse,
});

export const getSendResetPasswordEmailResponseMock = (
  overrideResponse: Partial<SendResetPasswordEmail200> = {},
): SendResetPasswordEmail200 => ({
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getResetPasswordResponseMock = (
  overrideResponse: Partial<ResetPassword200> = {},
): ResetPassword200 => ({
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getUpdatePasswordResponseMock = (
  overrideResponse: Partial<UpdatePassword200> = {},
): UpdatePassword200 => ({
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getGetUserMockHandler = (
  overrideResponse?:
    | GetUser200
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetUser200> | GetUser200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/user',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetUserResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getUpdateMeMockHandler = (
  overrideResponse?:
    | UpdateMe200
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<UpdateMe200> | UpdateMe200),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    '*/user',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateMeResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getDeleteMeMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    '*/user',
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
    options,
  );
};

export const getGetGroupsMockHandler = (
  overrideResponse?:
    | GetGroups200Item[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetGroups200Item[]> | GetGroups200Item[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/user/groups',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetGroupsResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetMembershipsMockHandler = (
  overrideResponse?:
    | GetMemberships200Item[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetMemberships200Item[]> | GetMemberships200Item[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/user/memberships',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetMembershipsResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getListDoneTasksMockHandler = (
  overrideResponse?:
    | ListDoneTasks200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ListDoneTasks200> | ListDoneTasks200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/user/history',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getListDoneTasksResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getSendResetPasswordEmailMockHandler = (
  overrideResponse?:
    | SendResetPasswordEmail200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SendResetPasswordEmail200> | SendResetPasswordEmail200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/user/send-reset-password-email',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getSendResetPasswordEmailResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getResetPasswordMockHandler = (
  overrideResponse?:
    | ResetPassword200
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<ResetPassword200> | ResetPassword200),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    '*/user/reset-password',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getResetPasswordResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getUpdatePasswordMockHandler = (
  overrideResponse?:
    | UpdatePassword200
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<UpdatePassword200> | UpdatePassword200),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    '*/user/password',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdatePasswordResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};
export const getUserMock = () => [
  getGetUserMockHandler(),
  getUpdateMeMockHandler(),
  getDeleteMeMockHandler(),
  getGetGroupsMockHandler(),
  getGetMembershipsMockHandler(),
  getListDoneTasksMockHandler(),
  getSendResetPasswordEmailMockHandler(),
  getResetPasswordMockHandler(),
  getUpdatePasswordMockHandler(),
];
