/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';

import { httpClient } from '../../httpClient';
import type {
  AcceptInvitation200,
  AcceptInvitationBody,
  Create200,
  CreateGroupBody,
  Get200,
  GetMember200,
  GroupUpdateBody,
  Id,
  InviteMemberBody,
  ListGroupTasksParams,
  Task,
  Update200,
} from '../../models';

export const get = (id: number, signal?: AbortSignal) => {
  return httpClient<Get200>({ url: `/groups/${id}`, method: 'GET', signal });
};

export const getGetQueryKey = (id?: number) => {
  return [`/groups/${id}`] as const;
};

export const getGetQueryOptions = <TData = Awaited<ReturnType<typeof get>>, TError = unknown>(
  id: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof get>>> = ({ signal }) => get(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof get>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetQueryResult = NonNullable<Awaited<ReturnType<typeof get>>>;
export type GetQueryError = unknown;

export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = unknown>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof get>>,
          TError,
          Awaited<ReturnType<typeof get>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = unknown>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof get>>,
          TError,
          Awaited<ReturnType<typeof get>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = unknown>(
  id: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = unknown>(
  id: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetQuery = async <TData = Awaited<ReturnType<typeof get>>, TError = unknown>(
  queryClient: QueryClient,
  id: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> },
): Promise<QueryClient> => {
  const queryOptions = getGetQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof get>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof get>>> = ({ signal }) => get(id, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof get>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof get>>>;
export type GetSuspenseQueryError = unknown;

export function useGetSuspense<TData = Awaited<ReturnType<typeof get>>, TError = unknown>(
  id: number,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSuspense<TData = Awaited<ReturnType<typeof get>>, TError = unknown>(
  id: number,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSuspense<TData = Awaited<ReturnType<typeof get>>, TError = unknown>(
  id: number,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetSuspense<TData = Awaited<ReturnType<typeof get>>, TError = unknown>(
  id: number,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetSuspenseQueryOptions(id, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const update = (id: number, groupUpdateBody: GroupUpdateBody) => {
  return httpClient<Update200>({
    url: `/groups/${id}`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: groupUpdateBody,
  });
};

export const getUpdateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof update>>,
    TError,
    { id: number; data: GroupUpdateBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof update>>,
  TError,
  { id: number; data: GroupUpdateBody },
  TContext
> => {
  const mutationKey = ['update'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof update>>,
    { id: number; data: GroupUpdateBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return update(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateMutationResult = NonNullable<Awaited<ReturnType<typeof update>>>;
export type UpdateMutationBody = GroupUpdateBody;
export type UpdateMutationError = unknown;

export const useUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof update>>,
      TError,
      { id: number; data: GroupUpdateBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof update>>,
  TError,
  { id: number; data: GroupUpdateBody },
  TContext
> => {
  const mutationOptions = getUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const _delete = (id: number) => {
  return httpClient<void>({ url: `/groups/${id}`, method: 'DELETE' });
};

export const getDeleteMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof _delete>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof _delete>>, TError, { id: number }, TContext> => {
  const mutationKey = ['_delete'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof _delete>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return _delete(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type _DeleteMutationResult = NonNullable<Awaited<ReturnType<typeof _delete>>>;

export type _DeleteMutationError = unknown;

export const useDelete = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof _delete>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof _delete>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const create = (createGroupBody: CreateGroupBody, signal?: AbortSignal) => {
  return httpClient<Create200>({
    url: `/groups`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createGroupBody,
    signal,
  });
};

export const getCreateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof create>>,
    TError,
    { data: CreateGroupBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof create>>,
  TError,
  { data: CreateGroupBody },
  TContext
> => {
  const mutationKey = ['create'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof create>>,
    { data: CreateGroupBody }
  > = (props) => {
    const { data } = props ?? {};

    return create(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateMutationResult = NonNullable<Awaited<ReturnType<typeof create>>>;
export type CreateMutationBody = CreateGroupBody;
export type CreateMutationError = unknown;

export const useCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof create>>,
      TError,
      { data: CreateGroupBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof create>>,
  TError,
  { data: CreateGroupBody },
  TContext
> => {
  const mutationOptions = getCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 그룹에 소속된 유저 조회
그룹 조회(GET /groups/:id)시, 멤버로 가입된 유저 목록도 함께 조회됨.
 */
export const getMember = (id: Id, memberUserId: Id, signal?: AbortSignal) => {
  return httpClient<GetMember200>({
    url: `/groups/${id}/member/${memberUserId}`,
    method: 'GET',
    signal,
  });
};

export const getGetMemberQueryKey = (id?: Id, memberUserId?: Id) => {
  return [`/groups/${id}/member/${memberUserId}`] as const;
};

export const getGetMemberQueryOptions = <
  TData = Awaited<ReturnType<typeof getMember>>,
  TError = unknown,
>(
  id: Id,
  memberUserId: Id,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMember>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMemberQueryKey(id, memberUserId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMember>>> = ({ signal }) =>
    getMember(id, memberUserId, signal);

  return { queryKey, queryFn, enabled: !!(id && memberUserId), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMember>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMemberQueryResult = NonNullable<Awaited<ReturnType<typeof getMember>>>;
export type GetMemberQueryError = unknown;

export function useGetMember<TData = Awaited<ReturnType<typeof getMember>>, TError = unknown>(
  id: Id,
  memberUserId: Id,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMember>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMember>>,
          TError,
          Awaited<ReturnType<typeof getMember>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetMember<TData = Awaited<ReturnType<typeof getMember>>, TError = unknown>(
  id: Id,
  memberUserId: Id,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMember>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMember>>,
          TError,
          Awaited<ReturnType<typeof getMember>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetMember<TData = Awaited<ReturnType<typeof getMember>>, TError = unknown>(
  id: Id,
  memberUserId: Id,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMember>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetMember<TData = Awaited<ReturnType<typeof getMember>>, TError = unknown>(
  id: Id,
  memberUserId: Id,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMember>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetMemberQueryOptions(id, memberUserId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetMemberQuery = async <
  TData = Awaited<ReturnType<typeof getMember>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: Id,
  memberUserId: Id,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMember>>, TError, TData>>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetMemberQueryOptions(id, memberUserId, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetMemberSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getMember>>,
  TError = unknown,
>(
  id: Id,
  memberUserId: Id,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getMember>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMemberQueryKey(id, memberUserId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMember>>> = ({ signal }) =>
    getMember(id, memberUserId, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getMember>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMemberSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getMember>>>;
export type GetMemberSuspenseQueryError = unknown;

export function useGetMemberSuspense<
  TData = Awaited<ReturnType<typeof getMember>>,
  TError = unknown,
>(
  id: Id,
  memberUserId: Id,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getMember>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetMemberSuspense<
  TData = Awaited<ReturnType<typeof getMember>>,
  TError = unknown,
>(
  id: Id,
  memberUserId: Id,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getMember>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetMemberSuspense<
  TData = Awaited<ReturnType<typeof getMember>>,
  TError = unknown,
>(
  id: Id,
  memberUserId: Id,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getMember>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetMemberSuspense<
  TData = Awaited<ReturnType<typeof getMember>>,
  TError = unknown,
>(
  id: Id,
  memberUserId: Id,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getMember>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetMemberSuspenseQueryOptions(id, memberUserId, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteMember = (id: Id, memberUserId: Id) => {
  return httpClient<void>({ url: `/groups/${id}/member/${memberUserId}`, method: 'DELETE' });
};

export const getDeleteMemberMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMember>>,
    TError,
    { id: Id; memberUserId: Id },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMember>>,
  TError,
  { id: Id; memberUserId: Id },
  TContext
> => {
  const mutationKey = ['deleteMember'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMember>>,
    { id: Id; memberUserId: Id }
  > = (props) => {
    const { id, memberUserId } = props ?? {};

    return deleteMember(id, memberUserId);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMemberMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMember>>>;

export type DeleteMemberMutationError = unknown;

export const useDeleteMember = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteMember>>,
      TError,
      { id: Id; memberUserId: Id },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteMember>>,
  TError,
  { id: Id; memberUserId: Id },
  TContext
> => {
  const mutationOptions = getDeleteMemberMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 초대 링크용 토큰 생성
- 초대 링크에 토큰을 포함시켜서, 초대 링크를 받은 사용자가 접속시, 토큰을 사용해서 초대를 수락하여 스스로를 그룹에 포함시키게 됨.
 */
export const getInvitation = (id: number, signal?: AbortSignal) => {
  return httpClient<unknown>({ url: `/groups/${id}/invitation`, method: 'GET', signal });
};

export const getGetInvitationQueryKey = (id?: number) => {
  return [`/groups/${id}/invitation`] as const;
};

export const getGetInvitationQueryOptions = <
  TData = Awaited<ReturnType<typeof getInvitation>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvitation>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInvitationQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInvitation>>> = ({ signal }) =>
    getInvitation(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getInvitation>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInvitationQueryResult = NonNullable<Awaited<ReturnType<typeof getInvitation>>>;
export type GetInvitationQueryError = unknown;

export function useGetInvitation<
  TData = Awaited<ReturnType<typeof getInvitation>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvitation>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInvitation>>,
          TError,
          Awaited<ReturnType<typeof getInvitation>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInvitation<
  TData = Awaited<ReturnType<typeof getInvitation>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvitation>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInvitation>>,
          TError,
          Awaited<ReturnType<typeof getInvitation>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInvitation<
  TData = Awaited<ReturnType<typeof getInvitation>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvitation>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetInvitation<
  TData = Awaited<ReturnType<typeof getInvitation>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvitation>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetInvitationQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetInvitationQuery = async <
  TData = Awaited<ReturnType<typeof getInvitation>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvitation>>, TError, TData>>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetInvitationQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetInvitationSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getInvitation>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInvitation>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInvitationQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInvitation>>> = ({ signal }) =>
    getInvitation(id, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getInvitation>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInvitationSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInvitation>>
>;
export type GetInvitationSuspenseQueryError = unknown;

export function useGetInvitationSuspense<
  TData = Awaited<ReturnType<typeof getInvitation>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInvitation>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInvitationSuspense<
  TData = Awaited<ReturnType<typeof getInvitation>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInvitation>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInvitationSuspense<
  TData = Awaited<ReturnType<typeof getInvitation>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInvitation>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetInvitationSuspense<
  TData = Awaited<ReturnType<typeof getInvitation>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof getInvitation>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetInvitationSuspenseQueryOptions(id, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * - GET {id}/invitation으로 생성한 토큰으로, 초대를 수락하는 엔드포인트
 */
export const acceptInvitation = (
  acceptInvitationBody: AcceptInvitationBody,
  signal?: AbortSignal,
) => {
  return httpClient<AcceptInvitation200>({
    url: `/groups/accept-invitation`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: acceptInvitationBody,
    signal,
  });
};

export const getAcceptInvitationMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof acceptInvitation>>,
    TError,
    { data: AcceptInvitationBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof acceptInvitation>>,
  TError,
  { data: AcceptInvitationBody },
  TContext
> => {
  const mutationKey = ['acceptInvitation'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof acceptInvitation>>,
    { data: AcceptInvitationBody }
  > = (props) => {
    const { data } = props ?? {};

    return acceptInvitation(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AcceptInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof acceptInvitation>>
>;
export type AcceptInvitationMutationBody = AcceptInvitationBody;
export type AcceptInvitationMutationError = unknown;

export const useAcceptInvitation = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof acceptInvitation>>,
      TError,
      { data: AcceptInvitationBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof acceptInvitation>>,
  TError,
  { data: AcceptInvitationBody },
  TContext
> => {
  const mutationOptions = getAcceptInvitationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 초대 링크없이 그룹에 유저를 추가하는 엔드포인트
 */
export const inviteMember = (
  id: number,
  inviteMemberBody: InviteMemberBody,
  signal?: AbortSignal,
) => {
  return httpClient<void>({
    url: `/groups/${id}/member`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: inviteMemberBody,
    signal,
  });
};

export const getInviteMemberMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof inviteMember>>,
    TError,
    { id: number; data: InviteMemberBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof inviteMember>>,
  TError,
  { id: number; data: InviteMemberBody },
  TContext
> => {
  const mutationKey = ['inviteMember'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof inviteMember>>,
    { id: number; data: InviteMemberBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return inviteMember(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type InviteMemberMutationResult = NonNullable<Awaited<ReturnType<typeof inviteMember>>>;
export type InviteMemberMutationBody = InviteMemberBody;
export type InviteMemberMutationError = unknown;

export const useInviteMember = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof inviteMember>>,
      TError,
      { id: number; data: InviteMemberBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof inviteMember>>,
  TError,
  { id: number; data: InviteMemberBody },
  TContext
> => {
  const mutationOptions = getInviteMemberMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 특정 일자, 특정 할일 리스트의 할일 리스트
 */
export const listGroupTasks = (id: Id, params?: ListGroupTasksParams, signal?: AbortSignal) => {
  return httpClient<Task[]>({ url: `/groups/${id}/tasks`, method: 'GET', params, signal });
};

export const getListGroupTasksQueryKey = (id?: Id, params?: ListGroupTasksParams) => {
  return [`/groups/${id}/tasks`, ...(params ? [params] : [])] as const;
};

export const getListGroupTasksQueryOptions = <
  TData = Awaited<ReturnType<typeof listGroupTasks>>,
  TError = unknown,
>(
  id: Id,
  params?: ListGroupTasksParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listGroupTasks>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListGroupTasksQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listGroupTasks>>> = ({ signal }) =>
    listGroupTasks(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listGroupTasks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListGroupTasksQueryResult = NonNullable<Awaited<ReturnType<typeof listGroupTasks>>>;
export type ListGroupTasksQueryError = unknown;

export function useListGroupTasks<
  TData = Awaited<ReturnType<typeof listGroupTasks>>,
  TError = unknown,
>(
  id: Id,
  params: undefined | ListGroupTasksParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof listGroupTasks>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listGroupTasks>>,
          TError,
          Awaited<ReturnType<typeof listGroupTasks>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListGroupTasks<
  TData = Awaited<ReturnType<typeof listGroupTasks>>,
  TError = unknown,
>(
  id: Id,
  params?: ListGroupTasksParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listGroupTasks>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listGroupTasks>>,
          TError,
          Awaited<ReturnType<typeof listGroupTasks>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListGroupTasks<
  TData = Awaited<ReturnType<typeof listGroupTasks>>,
  TError = unknown,
>(
  id: Id,
  params?: ListGroupTasksParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listGroupTasks>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useListGroupTasks<
  TData = Awaited<ReturnType<typeof listGroupTasks>>,
  TError = unknown,
>(
  id: Id,
  params?: ListGroupTasksParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listGroupTasks>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getListGroupTasksQueryOptions(id, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchListGroupTasksQuery = async <
  TData = Awaited<ReturnType<typeof listGroupTasks>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: Id,
  params?: ListGroupTasksParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listGroupTasks>>, TError, TData>>;
  },
): Promise<QueryClient> => {
  const queryOptions = getListGroupTasksQueryOptions(id, params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getListGroupTasksSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof listGroupTasks>>,
  TError = unknown,
>(
  id: Id,
  params?: ListGroupTasksParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof listGroupTasks>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListGroupTasksQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listGroupTasks>>> = ({ signal }) =>
    listGroupTasks(id, params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof listGroupTasks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListGroupTasksSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof listGroupTasks>>
>;
export type ListGroupTasksSuspenseQueryError = unknown;

export function useListGroupTasksSuspense<
  TData = Awaited<ReturnType<typeof listGroupTasks>>,
  TError = unknown,
>(
  id: Id,
  params: undefined | ListGroupTasksParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof listGroupTasks>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListGroupTasksSuspense<
  TData = Awaited<ReturnType<typeof listGroupTasks>>,
  TError = unknown,
>(
  id: Id,
  params?: ListGroupTasksParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof listGroupTasks>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListGroupTasksSuspense<
  TData = Awaited<ReturnType<typeof listGroupTasks>>,
  TError = unknown,
>(
  id: Id,
  params?: ListGroupTasksParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof listGroupTasks>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useListGroupTasksSuspense<
  TData = Awaited<ReturnType<typeof listGroupTasks>>,
  TError = unknown,
>(
  id: Id,
  params?: ListGroupTasksParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof listGroupTasks>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getListGroupTasksSuspenseQueryOptions(id, params, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
