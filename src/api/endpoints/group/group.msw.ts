/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import type { RequestHandlerOptions } from 'msw';
import { delay, http, HttpResponse } from 'msw';

import type {
  AcceptInvitation200,
  Create200,
  Get200,
  GetMember200,
  Task,
  Update200,
} from '../../models';
import { _36EnumsRole, FrequencyType } from '../../models';

export const getGetResponseMock = (overrideResponse: Partial<Get200> = {}): Get200 => ({
  teamId: faker.string.alpha({ length: { min: 10, max: 20 } }),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  image: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  members: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      role: faker.helpers.arrayElement(Object.values(_36EnumsRole)),
      userImage: faker.string.alpha({ length: { min: 10, max: 20 } }),
      userEmail: faker.string.alpha({ length: { min: 10, max: 20 } }),
      userName: faker.string.alpha({ length: { min: 10, max: 20 } }),
      groupId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      userId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    }),
  ),
  taskLists: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      displayIndex: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      groupId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      tasks: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
        () => ({}),
      ),
    }),
  ),
  ...overrideResponse,
});

export const getUpdateResponseMock = (overrideResponse: Partial<Update200> = {}): Update200 => ({
  teamId: faker.string.alpha({ length: { min: 10, max: 20 } }),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  image: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  ...overrideResponse,
});

export const getCreateResponseMock = (overrideResponse: Partial<Create200> = {}): Create200 => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  image: faker.string.alpha({ length: { min: 10, max: 20 } }),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  ...overrideResponse,
});

export const getGetMemberResponseMock = (
  overrideResponse: Partial<GetMember200> = {},
): GetMember200 => ({
  role: faker.helpers.arrayElement(Object.values(_36EnumsRole)),
  userImage: faker.string.alpha({ length: { min: 10, max: 20 } }),
  userEmail: faker.string.alpha({ length: { min: 10, max: 20 } }),
  userName: faker.string.alpha({ length: { min: 10, max: 20 } }),
  groupId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  userId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  ...overrideResponse,
});

export const getAcceptInvitationResponseMock = (
  overrideResponse: Partial<AcceptInvitation200> = {},
): AcceptInvitation200 => ({
  groupId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  ...overrideResponse,
});

export const getListGroupTasksResponseMock = (): Task[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    doneBy: {
      user: faker.helpers.arrayElement([
        {
          image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
          nickname: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        },
        undefined,
      ]),
    },
    writer: faker.helpers.arrayElement([
      {
        image: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
          undefined,
        ]),
        nickname: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      },
      undefined,
    ]),
    displayIndex: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    commentCount: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    deletedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    recurringId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    frequency: faker.helpers.arrayElement(Object.values(FrequencyType)),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    doneAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    description: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  }));

export const getGetMockHandler = (
  overrideResponse?:
    | Get200
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Get200> | Get200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/groups/:id',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getUpdateMockHandler = (
  overrideResponse?:
    | Update200
    | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<Update200> | Update200),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    '*/groups/:id',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getDeleteMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    '*/groups/:id',
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
    options,
  );
};

export const getCreateMockHandler = (
  overrideResponse?:
    | Create200
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Create200> | Create200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/groups',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetMemberMockHandler = (
  overrideResponse?:
    | GetMember200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetMember200> | GetMember200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/groups/:id/member/:memberUserId',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetMemberResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getDeleteMemberMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    '*/groups/:id/member/:memberUserId',
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
    options,
  );
};

export const getGetInvitationMockHandler = (
  overrideResponse?:
    | unknown
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/groups/:id/invitation',
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
    options,
  );
};

export const getAcceptInvitationMockHandler = (
  overrideResponse?:
    | AcceptInvitation200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<AcceptInvitation200> | AcceptInvitation200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/groups/accept-invitation',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getAcceptInvitationResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getInviteMemberMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/groups/:id/member',
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
    options,
  );
};

export const getListGroupTasksMockHandler = (
  overrideResponse?:
    | Task[]
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Task[]> | Task[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/groups/:id/tasks',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getListGroupTasksResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};
export const getGroupMock = () => [
  getGetMockHandler(),
  getUpdateMockHandler(),
  getDeleteMockHandler(),
  getCreateMockHandler(),
  getGetMemberMockHandler(),
  getDeleteMemberMockHandler(),
  getGetInvitationMockHandler(),
  getAcceptInvitationMockHandler(),
  getInviteMemberMockHandler(),
  getListGroupTasksMockHandler(),
];
