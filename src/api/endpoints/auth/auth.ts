/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';

import { httpClient } from '../../httpClient';
import type {
  _36EnumsOauthProvider,
  RefreshToken200,
  RefreshTokenBody,
  SignInRequestBody,
  SignInResponse,
  SignInWithOauthRequestBody,
  SignUpRequestBody,
  SignUpResponse,
} from '../../models';

/**
 * 회원가입
 */
export const signUp = (signUpRequestBody: SignUpRequestBody, signal?: AbortSignal) => {
  return httpClient<SignUpResponse>({
    url: `/auth/signUp`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: signUpRequestBody,
    signal,
  });
};

export const getSignUpMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signUp>>,
    TError,
    { data: SignUpRequestBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof signUp>>,
  TError,
  { data: SignUpRequestBody },
  TContext
> => {
  const mutationKey = ['signUp'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signUp>>,
    { data: SignUpRequestBody }
  > = (props) => {
    const { data } = props ?? {};

    return signUp(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SignUpMutationResult = NonNullable<Awaited<ReturnType<typeof signUp>>>;
export type SignUpMutationBody = SignUpRequestBody;
export type SignUpMutationError = unknown;

export const useSignUp = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof signUp>>,
      TError,
      { data: SignUpRequestBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof signUp>>,
  TError,
  { data: SignUpRequestBody },
  TContext
> => {
  const mutationOptions = getSignUpMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 로그인
 */
export const signIn = (signInRequestBody: SignInRequestBody, signal?: AbortSignal) => {
  return httpClient<SignInResponse>({
    url: `/auth/signIn`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: signInRequestBody,
    signal,
  });
};

export const getSignInMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signIn>>,
    TError,
    { data: SignInRequestBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof signIn>>,
  TError,
  { data: SignInRequestBody },
  TContext
> => {
  const mutationKey = ['signIn'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signIn>>,
    { data: SignInRequestBody }
  > = (props) => {
    const { data } = props ?? {};

    return signIn(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SignInMutationResult = NonNullable<Awaited<ReturnType<typeof signIn>>>;
export type SignInMutationBody = SignInRequestBody;
export type SignInMutationError = unknown;

export const useSignIn = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof signIn>>,
      TError,
      { data: SignInRequestBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof signIn>>,
  TError,
  { data: SignInRequestBody },
  TContext
> => {
  const mutationOptions = getSignInMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 액세스토큰 새로 받기
 */
export const refreshToken = (refreshTokenBody: RefreshTokenBody, signal?: AbortSignal) => {
  return httpClient<RefreshToken200>({
    url: `/auth/refresh-token`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: refreshTokenBody,
    signal,
  });
};

export const getRefreshTokenMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refreshToken>>,
    TError,
    { data: RefreshTokenBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof refreshToken>>,
  TError,
  { data: RefreshTokenBody },
  TContext
> => {
  const mutationKey = ['refreshToken'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refreshToken>>,
    { data: RefreshTokenBody }
  > = (props) => {
    const { data } = props ?? {};

    return refreshToken(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type RefreshTokenMutationResult = NonNullable<Awaited<ReturnType<typeof refreshToken>>>;
export type RefreshTokenMutationBody = RefreshTokenBody;
export type RefreshTokenMutationError = unknown;

export const useRefreshToken = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof refreshToken>>,
      TError,
      { data: RefreshTokenBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof refreshToken>>,
  TError,
  { data: RefreshTokenBody },
  TContext
> => {
  const mutationOptions = getRefreshTokenMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 간편 로그인

가입되어있지 않을 경우엔 가입됩니다.
 */
export const signInWithOauth = (
  provider: _36EnumsOauthProvider,
  signInWithOauthRequestBody: SignInWithOauthRequestBody,
  signal?: AbortSignal,
) => {
  return httpClient<SignInResponse>({
    url: `/auth/signIn/${provider}`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: signInWithOauthRequestBody,
    signal,
  });
};

export const getSignInWithOauthMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signInWithOauth>>,
    TError,
    { provider: _36EnumsOauthProvider; data: SignInWithOauthRequestBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof signInWithOauth>>,
  TError,
  { provider: _36EnumsOauthProvider; data: SignInWithOauthRequestBody },
  TContext
> => {
  const mutationKey = ['signInWithOauth'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signInWithOauth>>,
    { provider: _36EnumsOauthProvider; data: SignInWithOauthRequestBody }
  > = (props) => {
    const { provider, data } = props ?? {};

    return signInWithOauth(provider, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SignInWithOauthMutationResult = NonNullable<
  Awaited<ReturnType<typeof signInWithOauth>>
>;
export type SignInWithOauthMutationBody = SignInWithOauthRequestBody;
export type SignInWithOauthMutationError = unknown;

export const useSignInWithOauth = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof signInWithOauth>>,
      TError,
      { provider: _36EnumsOauthProvider; data: SignInWithOauthRequestBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof signInWithOauth>>,
  TError,
  { provider: _36EnumsOauthProvider; data: SignInWithOauthRequestBody },
  TContext
> => {
  const mutationOptions = getSignInWithOauthMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
