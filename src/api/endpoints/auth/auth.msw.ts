/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import type { RequestHandlerOptions } from 'msw';
import { delay, http, HttpResponse } from 'msw';

import type { RefreshToken200, SignInResponse, SignUpResponse } from '../../models';

export const getSignUpResponseMock = (
  overrideResponse: Partial<SignUpResponse> = {},
): SignUpResponse => ({
  refreshToken: faker.string.alpha({ length: { min: 10, max: 20 } }),
  accessToken: faker.string.alpha({ length: { min: 10, max: 20 } }),
  user: {
    ...{
      teamId: faker.string.alpha({ length: { min: 10, max: 20 } }),
      image: faker.internet.url(),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      nickname: faker.string.alpha({ length: { min: 1, max: 30 } }),
      id: faker.number.int({ min: 1, max: undefined }),
    },
    ...{ email: faker.internet.email() },
  },
  ...overrideResponse,
});

export const getSignInResponseMock = (
  overrideResponse: Partial<SignInResponse> = {},
): SignInResponse => ({
  refreshToken: faker.string.alpha({ length: { min: 10, max: 20 } }),
  accessToken: faker.string.alpha({ length: { min: 10, max: 20 } }),
  user: {
    ...{
      teamId: faker.string.alpha({ length: { min: 10, max: 20 } }),
      image: faker.internet.url(),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      nickname: faker.string.alpha({ length: { min: 1, max: 30 } }),
      id: faker.number.int({ min: 1, max: undefined }),
    },
    ...{ email: faker.internet.email() },
  },
  ...overrideResponse,
});

export const getRefreshTokenResponseMock = (
  overrideResponse: Partial<RefreshToken200> = {},
): RefreshToken200 => ({
  accessToken: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getSignInWithOauthResponseMock = (
  overrideResponse: Partial<SignInResponse> = {},
): SignInResponse => ({
  refreshToken: faker.string.alpha({ length: { min: 10, max: 20 } }),
  accessToken: faker.string.alpha({ length: { min: 10, max: 20 } }),
  user: {
    ...{
      teamId: faker.string.alpha({ length: { min: 10, max: 20 } }),
      image: faker.internet.url(),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      nickname: faker.string.alpha({ length: { min: 1, max: 30 } }),
      id: faker.number.int({ min: 1, max: undefined }),
    },
    ...{ email: faker.internet.email() },
  },
  ...overrideResponse,
});

export const getSignUpMockHandler = (
  overrideResponse?:
    | SignUpResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SignUpResponse> | SignUpResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/auth/signUp',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getSignUpResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getSignInMockHandler = (
  overrideResponse?:
    | SignInResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SignInResponse> | SignInResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/auth/signIn',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getSignInResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getRefreshTokenMockHandler = (
  overrideResponse?:
    | RefreshToken200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<RefreshToken200> | RefreshToken200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/auth/refresh-token',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getRefreshTokenResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getSignInWithOauthMockHandler = (
  overrideResponse?:
    | SignInResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SignInResponse> | SignInResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/auth/signIn/:provider',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getSignInWithOauthResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};
export const getAuthMock = () => [
  getSignUpMockHandler(),
  getSignInMockHandler(),
  getRefreshTokenMockHandler(),
  getSignInWithOauthMockHandler(),
];
