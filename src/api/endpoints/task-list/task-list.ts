/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';

import { httpClient } from '../../httpClient';
import type {
  CreateTaskList200,
  CreateTaskListBody,
  GetTaskList200,
  GetTaskListParams,
  Id,
  UpdateTaskList200,
  UpdateTaskListBody,
  UpdateTaskListOrderBody,
} from '../../models';

export const getTaskList = (
  groupId: Id,
  id: string,
  params?: GetTaskListParams,
  signal?: AbortSignal,
) => {
  return httpClient<GetTaskList200>({
    url: `/groups/${groupId}/task-lists/${id}`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetTaskListQueryKey = (groupId?: Id, id?: string, params?: GetTaskListParams) => {
  return [`/groups/${groupId}/task-lists/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetTaskListQueryOptions = <
  TData = Awaited<ReturnType<typeof getTaskList>>,
  TError = unknown,
>(
  groupId: Id,
  id: string,
  params?: GetTaskListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskList>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTaskListQueryKey(groupId, id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTaskList>>> = ({ signal }) =>
    getTaskList(groupId, id, params, signal);

  return { queryKey, queryFn, enabled: !!(groupId && id), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTaskList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTaskListQueryResult = NonNullable<Awaited<ReturnType<typeof getTaskList>>>;
export type GetTaskListQueryError = unknown;

export function useGetTaskList<TData = Awaited<ReturnType<typeof getTaskList>>, TError = unknown>(
  groupId: Id,
  id: string,
  params: undefined | GetTaskListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskList>>,
          TError,
          Awaited<ReturnType<typeof getTaskList>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTaskList<TData = Awaited<ReturnType<typeof getTaskList>>, TError = unknown>(
  groupId: Id,
  id: string,
  params?: GetTaskListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskList>>,
          TError,
          Awaited<ReturnType<typeof getTaskList>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTaskList<TData = Awaited<ReturnType<typeof getTaskList>>, TError = unknown>(
  groupId: Id,
  id: string,
  params?: GetTaskListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskList>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetTaskList<TData = Awaited<ReturnType<typeof getTaskList>>, TError = unknown>(
  groupId: Id,
  id: string,
  params?: GetTaskListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskList>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetTaskListQueryOptions(groupId, id, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetTaskListQuery = async <
  TData = Awaited<ReturnType<typeof getTaskList>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  groupId: Id,
  id: string,
  params?: GetTaskListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskList>>, TError, TData>>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetTaskListQueryOptions(groupId, id, params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetTaskListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getTaskList>>,
  TError = unknown,
>(
  groupId: Id,
  id: string,
  params?: GetTaskListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTaskList>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTaskListQueryKey(groupId, id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTaskList>>> = ({ signal }) =>
    getTaskList(groupId, id, params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getTaskList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTaskListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getTaskList>>>;
export type GetTaskListSuspenseQueryError = unknown;

export function useGetTaskListSuspense<
  TData = Awaited<ReturnType<typeof getTaskList>>,
  TError = unknown,
>(
  groupId: Id,
  id: string,
  params: undefined | GetTaskListParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTaskList>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTaskListSuspense<
  TData = Awaited<ReturnType<typeof getTaskList>>,
  TError = unknown,
>(
  groupId: Id,
  id: string,
  params?: GetTaskListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTaskList>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTaskListSuspense<
  TData = Awaited<ReturnType<typeof getTaskList>>,
  TError = unknown,
>(
  groupId: Id,
  id: string,
  params?: GetTaskListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTaskList>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetTaskListSuspense<
  TData = Awaited<ReturnType<typeof getTaskList>>,
  TError = unknown,
>(
  groupId: Id,
  id: string,
  params?: GetTaskListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTaskList>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetTaskListSuspenseQueryOptions(groupId, id, params, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateTaskList = (groupId: Id, id: string, updateTaskListBody: UpdateTaskListBody) => {
  return httpClient<UpdateTaskList200>({
    url: `/groups/${groupId}/task-lists/${id}`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateTaskListBody,
  });
};

export const getUpdateTaskListMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTaskList>>,
    TError,
    { groupId: Id; id: string; data: UpdateTaskListBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTaskList>>,
  TError,
  { groupId: Id; id: string; data: UpdateTaskListBody },
  TContext
> => {
  const mutationKey = ['updateTaskList'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTaskList>>,
    { groupId: Id; id: string; data: UpdateTaskListBody }
  > = (props) => {
    const { groupId, id, data } = props ?? {};

    return updateTaskList(groupId, id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTaskListMutationResult = NonNullable<Awaited<ReturnType<typeof updateTaskList>>>;
export type UpdateTaskListMutationBody = UpdateTaskListBody;
export type UpdateTaskListMutationError = unknown;

export const useUpdateTaskList = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateTaskList>>,
      TError,
      { groupId: Id; id: string; data: UpdateTaskListBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateTaskList>>,
  TError,
  { groupId: Id; id: string; data: UpdateTaskListBody },
  TContext
> => {
  const mutationOptions = getUpdateTaskListMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteTaskList = (groupId: Id, id: string) => {
  return httpClient<void>({ url: `/groups/${groupId}/task-lists/${id}`, method: 'DELETE' });
};

export const getDeleteTaskListMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTaskList>>,
    TError,
    { groupId: Id; id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTaskList>>,
  TError,
  { groupId: Id; id: string },
  TContext
> => {
  const mutationKey = ['deleteTaskList'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTaskList>>,
    { groupId: Id; id: string }
  > = (props) => {
    const { groupId, id } = props ?? {};

    return deleteTaskList(groupId, id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTaskListMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTaskList>>>;

export type DeleteTaskListMutationError = unknown;

export const useDeleteTaskList = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteTaskList>>,
      TError,
      { groupId: Id; id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteTaskList>>,
  TError,
  { groupId: Id; id: string },
  TContext
> => {
  const mutationOptions = getDeleteTaskListMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const createTaskList = (
  groupId: Id,
  createTaskListBody: CreateTaskListBody,
  signal?: AbortSignal,
) => {
  return httpClient<CreateTaskList200>({
    url: `/groups/${groupId}/task-lists`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createTaskListBody,
    signal,
  });
};

export const getCreateTaskListMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTaskList>>,
    TError,
    { groupId: Id; data: CreateTaskListBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTaskList>>,
  TError,
  { groupId: Id; data: CreateTaskListBody },
  TContext
> => {
  const mutationKey = ['createTaskList'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTaskList>>,
    { groupId: Id; data: CreateTaskListBody }
  > = (props) => {
    const { groupId, data } = props ?? {};

    return createTaskList(groupId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTaskListMutationResult = NonNullable<Awaited<ReturnType<typeof createTaskList>>>;
export type CreateTaskListMutationBody = CreateTaskListBody;
export type CreateTaskListMutationError = unknown;

export const useCreateTaskList = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createTaskList>>,
      TError,
      { groupId: Id; data: CreateTaskListBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createTaskList>>,
  TError,
  { groupId: Id; data: CreateTaskListBody },
  TContext
> => {
  const mutationOptions = getCreateTaskListMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 할일 목록의 순서를 변경합니다.
 */
export const updateTaskListOrder = (
  groupId: Id,
  id: Id,
  updateTaskListOrderBody: UpdateTaskListOrderBody,
) => {
  return httpClient<void>({
    url: `/groups/${groupId}/task-lists/${id}/order`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateTaskListOrderBody,
  });
};

export const getUpdateTaskListOrderMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTaskListOrder>>,
    TError,
    { groupId: Id; id: Id; data: UpdateTaskListOrderBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTaskListOrder>>,
  TError,
  { groupId: Id; id: Id; data: UpdateTaskListOrderBody },
  TContext
> => {
  const mutationKey = ['updateTaskListOrder'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTaskListOrder>>,
    { groupId: Id; id: Id; data: UpdateTaskListOrderBody }
  > = (props) => {
    const { groupId, id, data } = props ?? {};

    return updateTaskListOrder(groupId, id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTaskListOrderMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTaskListOrder>>
>;
export type UpdateTaskListOrderMutationBody = UpdateTaskListOrderBody;
export type UpdateTaskListOrderMutationError = unknown;

export const useUpdateTaskListOrder = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateTaskListOrder>>,
      TError,
      { groupId: Id; id: Id; data: UpdateTaskListOrderBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateTaskListOrder>>,
  TError,
  { groupId: Id; id: Id; data: UpdateTaskListOrderBody },
  TContext
> => {
  const mutationOptions = getUpdateTaskListOrderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
