/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import type { RequestHandlerOptions } from 'msw';
import { delay, http, HttpResponse } from 'msw';

import type { CreateTaskList200, GetTaskList200, UpdateTaskList200 } from '../../models';
import { FrequencyType } from '../../models';

export const getGetTaskListResponseMock = (
  overrideResponse: Partial<GetTaskList200> = {},
): GetTaskList200 => ({
  displayIndex: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  groupId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  tasks: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    doneBy: {
      user: faker.helpers.arrayElement([
        {
          image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
          nickname: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        },
        undefined,
      ]),
    },
    writer: faker.helpers.arrayElement([
      {
        image: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
          undefined,
        ]),
        nickname: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      },
      undefined,
    ]),
    displayIndex: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    commentCount: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    deletedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    recurringId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    frequency: faker.helpers.arrayElement(Object.values(FrequencyType)),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    doneAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    description: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  })),
  ...overrideResponse,
});

export const getUpdateTaskListResponseMock = (
  overrideResponse: Partial<UpdateTaskList200> = {},
): UpdateTaskList200 => ({
  displayIndex: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  groupId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  ...overrideResponse,
});

export const getCreateTaskListResponseMock = (
  overrideResponse: Partial<CreateTaskList200> = {},
): CreateTaskList200 => ({
  displayIndex: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  groupId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  ...overrideResponse,
});

export const getGetTaskListMockHandler = (
  overrideResponse?:
    | GetTaskList200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetTaskList200> | GetTaskList200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/groups/:groupId/task-lists/:id',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetTaskListResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getUpdateTaskListMockHandler = (
  overrideResponse?:
    | UpdateTaskList200
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<UpdateTaskList200> | UpdateTaskList200),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    '*/groups/:groupId/task-lists/:id',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateTaskListResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getDeleteTaskListMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    '*/groups/:groupId/task-lists/:id',
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
    options,
  );
};

export const getCreateTaskListMockHandler = (
  overrideResponse?:
    | CreateTaskList200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateTaskList200> | CreateTaskList200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/groups/:groupId/task-lists',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateTaskListResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getUpdateTaskListOrderMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    '*/groups/:groupId/task-lists/:id/order',
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
    options,
  );
};
export const getTaskListMock = () => [
  getGetTaskListMockHandler(),
  getUpdateTaskListMockHandler(),
  getDeleteTaskListMockHandler(),
  getCreateTaskListMockHandler(),
  getUpdateTaskListOrderMockHandler(),
];
