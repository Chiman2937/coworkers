/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import type { RequestHandlerOptions } from 'msw';
import { delay, http, HttpResponse } from 'msw';

import type { OauthApp } from '../../models';
import { _36EnumsOauthProvider } from '../../models';

export const getUpsertOauthAppResponseMock = (
  overrideResponse: Partial<OauthApp> = {},
): OauthApp => ({
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  appSecret: faker.string.alpha({ length: { min: 10, max: 20 } }),
  appKey: faker.string.alpha({ length: { min: 10, max: 20 } }),
  provider: faker.helpers.arrayElement(Object.values(_36EnumsOauthProvider)),
  teamId: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.number.int({ min: 1, max: undefined }),
  ...overrideResponse,
});

export const getUpsertOauthAppMockHandler = (
  overrideResponse?:
    | OauthApp
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<OauthApp> | OauthApp),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/oauthApps',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getUpsertOauthAppResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};
export const getOauthMock = () => [getUpsertOauthAppMockHandler()];
