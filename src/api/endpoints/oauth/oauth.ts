/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';

import { httpClient } from '../../httpClient';
import type { OauthApp, UpsertOauthAppRequestBody } from '../../models';

/**
 * 간편 로그인 App 등록/수정<br/>
Google, Kakao 간편 로그인을 위한 App 을 등록하거나 수정합니다.<br/>
이미 등록된 앱이 있을 경우 덮어씌워집니다.

## Google
* appKey: <b>"클라이언트 id"</b>
* appSecret: 필요하지 않음

---

## Kakao
* appKey: <b>"REST API 키"</b>
* appSecret: 필요하지 않음

---

실습을 위해 발급받은 키를 등록해주세요. 실제 서비스에서 사용 하는 키를 등록해서는 안됩니다.
 */
export const upsertOauthApp = (
  upsertOauthAppRequestBody: UpsertOauthAppRequestBody,
  signal?: AbortSignal,
) => {
  return httpClient<OauthApp>({
    url: `/oauthApps`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: upsertOauthAppRequestBody,
    signal,
  });
};

export const getUpsertOauthAppMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof upsertOauthApp>>,
    TError,
    { data: UpsertOauthAppRequestBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof upsertOauthApp>>,
  TError,
  { data: UpsertOauthAppRequestBody },
  TContext
> => {
  const mutationKey = ['upsertOauthApp'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof upsertOauthApp>>,
    { data: UpsertOauthAppRequestBody }
  > = (props) => {
    const { data } = props ?? {};

    return upsertOauthApp(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpsertOauthAppMutationResult = NonNullable<Awaited<ReturnType<typeof upsertOauthApp>>>;
export type UpsertOauthAppMutationBody = UpsertOauthAppRequestBody;
export type UpsertOauthAppMutationError = unknown;

export const useUpsertOauthApp = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof upsertOauthApp>>,
      TError,
      { data: UpsertOauthAppRequestBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof upsertOauthApp>>,
  TError,
  { data: UpsertOauthAppRequestBody },
  TContext
> => {
  const mutationOptions = getUpsertOauthAppMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
