/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import type { RequestHandlerOptions } from 'msw';
import { delay, http, HttpResponse } from 'msw';

import type { CreateRecurringTasks200, Task, UpdateTask200 } from '../../models';
import { _36EnumsFrequencyType, FrequencyType } from '../../models';

export const getCreateRecurringTasksResponseMock = (
  overrideResponse: Partial<CreateRecurringTasks200> = {},
): CreateRecurringTasks200 => ({
  recurring: {
    writerId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    groupId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    taskListId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    monthDay: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    weekDays: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    ),
    frequencyType: faker.helpers.arrayElement(Object.values(_36EnumsFrequencyType)),
    startDate: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  },
  ...overrideResponse,
});

export const getListTasksResponseMock = (): Task[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    doneBy: {
      user: faker.helpers.arrayElement([
        {
          image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
          nickname: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        },
        undefined,
      ]),
    },
    writer: faker.helpers.arrayElement([
      {
        image: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
          undefined,
        ]),
        nickname: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      },
      undefined,
    ]),
    displayIndex: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    commentCount: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    deletedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    recurringId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    frequency: faker.helpers.arrayElement(Object.values(FrequencyType)),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    doneAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    description: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  }));

export const getGetTaskResponseMock = (overrideResponse: Partial<Task> = {}): Task => ({
  doneBy: {
    user: faker.helpers.arrayElement([
      {
        image: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
          undefined,
        ]),
        nickname: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      },
      undefined,
    ]),
  },
  writer: faker.helpers.arrayElement([
    {
      image: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
        undefined,
      ]),
      nickname: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    },
    undefined,
  ]),
  displayIndex: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  commentCount: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  deletedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    null,
  ]),
  recurringId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  frequency: faker.helpers.arrayElement(Object.values(FrequencyType)),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  doneAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
  date: `${faker.date.past().toISOString().split('.')[0]}Z`,
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  ...overrideResponse,
});

export const getUpdateTaskResponseMock = (
  overrideResponse: Partial<UpdateTask200> = {},
): UpdateTask200 => ({
  displayIndex: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  writerId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  userId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  frequency: faker.helpers.arrayElement(Object.values(_36EnumsFrequencyType)),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  recurringId: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  doneAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  date: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  ...overrideResponse,
});

export const getCreateRecurringTasksMockHandler = (
  overrideResponse?:
    | CreateRecurringTasks200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateRecurringTasks200> | CreateRecurringTasks200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/groups/:groupId/task-lists/:taskListId/tasks',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateRecurringTasksResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getListTasksMockHandler = (
  overrideResponse?:
    | Task[]
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Task[]> | Task[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/groups/:groupId/task-lists/:taskListId/tasks',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getListTasksResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetTaskMockHandler = (
  overrideResponse?:
    | Task
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Task> | Task),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/groups/:groupId/task-lists/:taskListId/tasks/:taskId',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetTaskResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getUpdateTaskMockHandler = (
  overrideResponse?:
    | UpdateTask200
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<UpdateTask200> | UpdateTask200),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    '*/groups/:groupId/task-lists/:taskListId/tasks/:taskId',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateTaskResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getDeleteTaskMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    '*/groups/:groupId/task-lists/:taskListId/tasks/:taskId',
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
    options,
  );
};

export const getUpdateTaskOrderMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    '*/groups/:groupId/task-lists/:taskListId/tasks/:id/order',
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
    options,
  );
};

export const getDeleteRecurringTaskMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    '*/groups/:groupId/task-lists/:taskListId/tasks/:taskId/recurring/:recurringId',
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
    options,
  );
};
export const getTaskMock = () => [
  getCreateRecurringTasksMockHandler(),
  getListTasksMockHandler(),
  getGetTaskMockHandler(),
  getUpdateTaskMockHandler(),
  getDeleteTaskMockHandler(),
  getUpdateTaskOrderMockHandler(),
  getDeleteRecurringTaskMockHandler(),
];
