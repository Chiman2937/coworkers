/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import type { RequestHandlerOptions } from 'msw';
import { delay, http, HttpResponse } from 'msw';

import type { ImageUpload200 } from '../../models';

export const getImageUploadResponseMock = (
  overrideResponse: Partial<ImageUpload200> = {},
): ImageUpload200 => ({
  url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getImageUploadMockHandler = (
  overrideResponse?:
    | ImageUpload200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ImageUpload200> | ImageUpload200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/images/upload',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getImageUploadResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};
export const getImageMock = () => [getImageUploadMockHandler()];
