/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * coworkers-api
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';

import { httpClient } from '../../httpClient';
import type { ImageUpload200, ImageUploadBody } from '../../models';

/**
 * 이미지 업로드,
프로젝트에 저장하는 이미지들은 이 엔드포인트를 통해 업로드한 후 URL을 획득하여 사용합니다.
 */
export const imageUpload = (imageUploadBody: ImageUploadBody, signal?: AbortSignal) => {
  const formData = new FormData();
  formData.append(`image`, imageUploadBody.image);

  return httpClient<ImageUpload200>({
    url: `/images/upload`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    signal,
  });
};

export const getImageUploadMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof imageUpload>>,
    TError,
    { data: ImageUploadBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof imageUpload>>,
  TError,
  { data: ImageUploadBody },
  TContext
> => {
  const mutationKey = ['imageUpload'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof imageUpload>>,
    { data: ImageUploadBody }
  > = (props) => {
    const { data } = props ?? {};

    return imageUpload(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ImageUploadMutationResult = NonNullable<Awaited<ReturnType<typeof imageUpload>>>;
export type ImageUploadMutationBody = ImageUploadBody;
export type ImageUploadMutationError = unknown;

export const useImageUpload = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof imageUpload>>,
      TError,
      { data: ImageUploadBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof imageUpload>>,
  TError,
  { data: ImageUploadBody },
  TContext
> => {
  const mutationOptions = getImageUploadMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
